// Code generated by applyconfiguration-gen. DO NOT EDIT.

package applyconfiguration

import (
	v1 "github.com/openshift/machine-config-operator/pkg/apis/machineconfiguration.openshift.io/v1"
	operatoropenshiftiov1 "github.com/openshift/machine-config-operator/pkg/apis/operator.openshift.io/v1"
	machineconfigurationopenshiftiov1 "github.com/openshift/machine-config-operator/pkg/generated/applyconfiguration/machineconfiguration.openshift.io/v1"
	applyconfigurationoperatoropenshiftiov1 "github.com/openshift/machine-config-operator/pkg/generated/applyconfiguration/operator.openshift.io/v1"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
)

// ForKind returns an apply configuration type for the given GroupVersionKind, or nil if no
// apply configuration type exists for the given GroupVersionKind.
func ForKind(kind schema.GroupVersionKind) interface{} {
	switch kind {
	// Group=machineconfiguration.openshift.io, Version=v1
	case v1.SchemeGroupVersion.WithKind("ContainerRuntimeConfig"):
		return &machineconfigurationopenshiftiov1.ContainerRuntimeConfigApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("ContainerRuntimeConfigCondition"):
		return &machineconfigurationopenshiftiov1.ContainerRuntimeConfigConditionApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("ContainerRuntimeConfigSpec"):
		return &machineconfigurationopenshiftiov1.ContainerRuntimeConfigSpecApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("ContainerRuntimeConfigStatus"):
		return &machineconfigurationopenshiftiov1.ContainerRuntimeConfigStatusApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("ContainerRuntimeConfiguration"):
		return &machineconfigurationopenshiftiov1.ContainerRuntimeConfigurationApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("ControllerConfig"):
		return &machineconfigurationopenshiftiov1.ControllerConfigApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("ControllerConfigSpec"):
		return &machineconfigurationopenshiftiov1.ControllerConfigSpecApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("ControllerConfigStatus"):
		return &machineconfigurationopenshiftiov1.ControllerConfigStatusApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("ControllerConfigStatusCondition"):
		return &machineconfigurationopenshiftiov1.ControllerConfigStatusConditionApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("KubeletConfig"):
		return &machineconfigurationopenshiftiov1.KubeletConfigApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("KubeletConfigCondition"):
		return &machineconfigurationopenshiftiov1.KubeletConfigConditionApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("KubeletConfigSpec"):
		return &machineconfigurationopenshiftiov1.KubeletConfigSpecApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("KubeletConfigStatus"):
		return &machineconfigurationopenshiftiov1.KubeletConfigStatusApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("MachineConfig"):
		return &machineconfigurationopenshiftiov1.MachineConfigApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("MachineConfigPool"):
		return &machineconfigurationopenshiftiov1.MachineConfigPoolApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("MachineConfigPoolCondition"):
		return &machineconfigurationopenshiftiov1.MachineConfigPoolConditionApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("MachineConfigPoolSpec"):
		return &machineconfigurationopenshiftiov1.MachineConfigPoolSpecApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("MachineConfigPoolStatus"):
		return &machineconfigurationopenshiftiov1.MachineConfigPoolStatusApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("MachineConfigPoolStatusConfiguration"):
		return &machineconfigurationopenshiftiov1.MachineConfigPoolStatusConfigurationApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("MachineConfigSpec"):
		return &machineconfigurationopenshiftiov1.MachineConfigSpecApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("NetworkInfo"):
		return &machineconfigurationopenshiftiov1.NetworkInfoApplyConfiguration{}

		// Group=operator.openshift.io, Version=v1
	case operatoropenshiftiov1.SchemeGroupVersion.WithKind("GenerationStatus"):
		return &applyconfigurationoperatoropenshiftiov1.GenerationStatusApplyConfiguration{}
	case operatoropenshiftiov1.SchemeGroupVersion.WithKind("MachineConfiguration"):
		return &applyconfigurationoperatoropenshiftiov1.MachineConfigurationApplyConfiguration{}
	case operatoropenshiftiov1.SchemeGroupVersion.WithKind("MachineConfigurationSpec"):
		return &applyconfigurationoperatoropenshiftiov1.MachineConfigurationSpecApplyConfiguration{}
	case operatoropenshiftiov1.SchemeGroupVersion.WithKind("MachineConfigurationStatus"):
		return &applyconfigurationoperatoropenshiftiov1.MachineConfigurationStatusApplyConfiguration{}
	case operatoropenshiftiov1.SchemeGroupVersion.WithKind("NodeStatus"):
		return &applyconfigurationoperatoropenshiftiov1.NodeStatusApplyConfiguration{}
	case operatoropenshiftiov1.SchemeGroupVersion.WithKind("OperatorCondition"):
		return &applyconfigurationoperatoropenshiftiov1.OperatorConditionApplyConfiguration{}
	case operatoropenshiftiov1.SchemeGroupVersion.WithKind("OperatorSpec"):
		return &applyconfigurationoperatoropenshiftiov1.OperatorSpecApplyConfiguration{}
	case operatoropenshiftiov1.SchemeGroupVersion.WithKind("OperatorStatus"):
		return &applyconfigurationoperatoropenshiftiov1.OperatorStatusApplyConfiguration{}
	case operatoropenshiftiov1.SchemeGroupVersion.WithKind("StaticPodOperatorSpec"):
		return &applyconfigurationoperatoropenshiftiov1.StaticPodOperatorSpecApplyConfiguration{}
	case operatoropenshiftiov1.SchemeGroupVersion.WithKind("StaticPodOperatorStatus"):
		return &applyconfigurationoperatoropenshiftiov1.StaticPodOperatorStatusApplyConfiguration{}

	}
	return nil
}
